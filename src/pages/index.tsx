import { truncate } from "fs";
import next, { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState,useEffect } from "react";
import {useInterval} from '../components/useinterval'
const Home: NextPage = () => {
  const [num,setNum]=useState([])
  const [currentNum,setCurrentNum]=useState(-1)
  const [nextNum,setNextNum]=useState(1);
  const [counter, setCounter] = useState(0);
  const [running,setRunning] = useState(false)
  const [increase,setIncrease]=useState(true)
  
  function randomUniqueNum(range:number, outputCount:number) {
    const arr = []
    for (let i = 1; i <= range; i++) {
      arr.push(i)
    }  
      
    for (let i = 1; i <= outputCount; i++) {
      const random = Math.floor(Math.random() * (range - i));
      num.push(arr[random]);
      arr[random] = arr[range - i];
    }  
    return num;
  }
  function handleScore(){
    if(counter===num[currentNum]){
      console.log('perfect')
    }else if(counter<num[currentNum]){
      console.log('too Early')
    }else{
      console.log('too Late')
    }
  
  }
  function handleStart(){  
    setRunning(true)      
  }

  function handleDirection(){
    if(counter<num[nextNum]){     
      setIncrease(true)
      console.log(`${counter} < ${num[nextNum]} I should be going up`)
    }else{
      setIncrease(false)
      console.log(`${counter} > ${num[nextNum]} I should be going down`)
    }     
  }

  function handleClick(){
    if(num.length >= currentNum){
      console.log(num.length)
      console.log(currentNum)
    handleDirection()
    setCurrentNum((preCurrentNum) => preCurrentNum + 1) 
    setNextNum((preNextNum) => preNextNum + 1) 
    handleScore();   
  }else{
    setRunning(false)
  }

  
  }

  useEffect(
    () => {
      randomUniqueNum(15,11) 
      setCurrentNum(0)   
      console.log(num)  
      console.log(currentNum)
    }, []);
    
    useEffect(
      () => {      
      
        console.log('render2')        
      }, [currentNum]);

      useInterval(()=>{
        if(running){
        if(increase){
        setCounter((prevCounter) => prevCounter + 1);
      }else{
        setCounter((prevCounter) => prevCounter - 1);
      }
    }
      },500) 

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
           <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">Stop On: 
            <span className="text-[hsl(280,100%,70%)]">{num[currentNum]}</span> </h1>
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
           <span className="text-[hsl(280,100%,70%)]">{counter}</span> 
          </h1>
          <div className="flex flex-row">
          <button  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full" onClick={handleStart}>Start Game</button>
          <button  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full" onClick={handleClick}>Click me</button>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
